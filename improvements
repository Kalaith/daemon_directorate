# Daemon Directorate: Development Roadmap

## Corporate Ladder Meta-Progression

### Overview
Introduce Infernal Org Chart with tiers: Associate → Manager → Director → VP → Board Member

### Features
- **Manager tier**: Access to HR events
- **Director tier**: Control multiple planets
- **VP tier**: Unlock new resources (Soul Essence, Bureaucratic Leverage)
- **Board tier**: Rival corporations enter play

Player progression feels like climbing the corporate hierarchy rather than just expanding territory.

### Implementation
```typescript
// Add to types/game.ts
export interface CorporateTier {
  id: string;
  name: string;
  level: number;
  requirements: {
    planetsControlled?: number;
    daysLived?: number;
    legacyGenerations?: number;
    defeatedRivals?: number;
    complianceAudits?: number;
  };
  unlocks: {
    resources?: string[];
    mechanics?: string[];
    apartmentRooms?: string[];
    eventTypes?: string[];
  };
}

// Add to GameState
corporateTier: CorporateTier;
promotionProgress: Record<string, number>;
```

```typescript
// Add promotion logic to useGameStore.ts
checkPromotion: () => {
  const currentTier = get().corporateTier;
  const nextTier = CORPORATE_TIERS[currentTier.level + 1];
  
  if (nextTier && meetsRequirements(nextTier.requirements)) {
    promotePlayer(nextTier);
  }
},

promotePlayer: (newTier: CorporateTier) => {
  set({ corporateTier: newTier });
  unlockTierFeatures(newTier);
  get().addNotification(`Promoted to ${newTier.name}!`, 'success');
}
```

---

## Absurd Corporate Compliance Mechanics

### Overview
Add compliance "mini-systems" that eat resources and attention:

### Features
- **Performance Reviews**: Assign daemons to pointless evaluations or morale suffers
- **Budget Cuts**: Cut spending in one area or face penalties  
- **Mandatory Training**: Wastes daemon time, reduces mission efficiency temporarily
- **Escalating Punishment**: Audits, fines, daemon reassignment for non-compliance

### Implementation
```typescript
// Add to types/game.ts
export interface ComplianceTask {
  id: string;
  type: 'performance_review' | 'budget_cut' | 'mandatory_training' | 'audit';
  title: string;
  description: string;
  deadline: number; // days
  requirements: {
    daemonsRequired?: number;
    resourceCost?: Partial<GameResources>;
    duration?: number;
  };
  penalties: {
    moraleLoss?: number;
    resourceFines?: Partial<GameResources>;
    daemonReassignment?: boolean;
  };
}

// Add to GameState
complianceTasks: ComplianceTask[];
complianceDeadlines: Record<string, number>;
```

```typescript
// Add compliance system to useGameStore.ts
generateComplianceTask: () => {
  const task = COMPLIANCE_TEMPLATES[Math.floor(Math.random() * COMPLIANCE_TEMPLATES.length)];
  const deadline = get().daysPassed + task.requirements.duration;
  
  set(state => ({
    complianceTasks: [...state.complianceTasks, { ...task, deadline }],
    complianceDeadlines: { ...state.complianceDeadlines, [task.id]: deadline }
  }));
},

processComplianceDeadlines: () => {
  const { complianceTasks, daysPassed } = get();
  
  complianceTasks.forEach(task => {
    if (daysPassed >= task.deadline && !task.completed) {
      applyCompliancePenalties(task);
    }
  });
}
```

---

## Legacy Becomes Storytelling

### Overview
Extend succession/legacy system into narrative lore:

### Features
- **Family Logbooks**: Emergent stories for each lineage
- **Corporate Legends**: Legacy traits that accumulate into buffs/debuffs
- **Hall of Infamy**: Browse company history at any time
- **Long-term Replayability**: Humor-driven attachment to daemon dynasties

### Implementation
```typescript
// Add to types/game.ts
export interface DaemonLegacy {
  daemonId: string;
  bloodline: string;
  generation: number;
  stories: LegacyStory[];
  legends: LegacyLegend[];
  achievements: string[];
}

export interface LegacyStory {
  id: string;
  title: string;
  description: string;
  category: 'heroic' | 'tragic' | 'absurd' | 'legendary';
  timestamp: number;
}

export interface LegacyLegend {
  name: string;
  description: string;
  effects: {
    type: string;
    value: number;
    applies_to: 'bloodline' | 'company' | 'global';
  }[];
}

// Add to GameState
legacyBook: Record<string, DaemonLegacy>;
hallOfInfamy: LegacyStory[];
```

```typescript
// Add storytelling system to useGameStore.ts
addLegacyStory: (daemonId: string, story: Omit<LegacyStory, 'id' | 'timestamp'>) => {
  const { legacyBook, generateId } = get();
  const daemon = get().daemons.find(d => d.id === daemonId);
  
  if (daemon) {
    const newStory: LegacyStory = {
      id: generateId(),
      timestamp: Date.now(),
      ...story
    };
    
    const bloodlineLegacy = legacyBook[daemon.bloodline] || createNewLegacy(daemon);
    bloodlineLegacy.stories.push(newStory);
    
    set({
      legacyBook: { ...legacyBook, [daemon.bloodline]: bloodlineLegacy },
      hallOfInfamy: [...get().hallOfInfamy, newStory]
    });
  }
},

generateLegacyLegend: (bloodline: string) => {
  const legacy = get().legacyBook[bloodline];
  if (legacy && legacy.stories.length >= 5) {
    const legend = createLegendFromStories(legacy.stories);
    legacy.legends.push(legend);
    applyLegendEffects(legend);
  }
}
```

---

## Surreal Corporate Satire Events

### Overview
Expand event system with surreal, lore-driven encounters:

### Features
- **Planetary HR Complaints**: Planets filing complaints against the company
- **Office Supply Crises**: Red staplers become critical resources
- **Trust Fall Casualties**: Mandatory team building with consequences
- **Department Feuds**: Inter-department rivalries among daemons
- **Escalating Absurdity**: Events scale with corporate tier

### Implementation
```typescript
// Add to constants/gameData.ts
export const SURREAL_EVENTS = {
  ASSOCIATE: [
    {
      id: 'copier_jam',
      title: 'The Great Copier Jam of Sector 7',
      description: 'A critical copier malfunction threatens quarterly reports.',
      type: 'choice',
      choices: [
        {
          label: 'Send your best technician',
          effects: [{ type: 'daemon_skill_loss', value: -10 }]
        },
        {
          label: 'Ignore it and hope it resolves itself',
          effects: [{ type: 'bureaucratic_penalty', value: -50 }]
        }
      ]
    }
  ],
  BOARD_MEMBER: [
    {
      id: 'planet_restructure',
      title: 'Planetary Reorganization Initiative',
      description: 'The Board has decided to restructure three planets into a single department.',
      type: 'automatic',
      effects: [
        { type: 'planet_merger', value: 3 },
        { type: 'chaos_bonus', value: 100 }
      ]
    }
  ]
};
```

```typescript
// Enhanced event system in useGameStore.ts
triggerSurrealEvent: () => {
  const { corporateTier } = get();
  const tierEvents = SURREAL_EVENTS[corporateTier.name.toUpperCase()] || [];
  
  if (tierEvents.length > 0) {
    const event = tierEvents[Math.floor(Math.random() * tierEvents.length)];
    showEventWithEscalatedAbsurdity(event, corporateTier.level);
  }
},

showEventWithEscalatedAbsurdity: (event: SurrealEvent, tierLevel: number) => {
  // Scale absurdity based on corporate tier
  const escalatedEvent = {
    ...event,
    description: `${event.description} ${getAbsurdityModifier(tierLevel)}`,
    effects: event.effects?.map(effect => ({
      ...effect,
      value: effect.value * (1 + tierLevel * 0.5)
    }))
  };
  
  get().setShowEventModal(true, escalatedEvent);
}
```

---

## Endgame & Replayability

### Overview
Multiple ending paths and prestige system for long-term engagement.

### Features
- **Branching Endings**: Based on management style (Profit Maximizer, Cult of Personality, Compliance Survivor, Collapse by Burnout)
- **Prestige System**: "Corporate Restructuring" with permanent bonuses
- **Randomized Progression**: Different org chart each run
- **Unlockable Content**: New daemon archetypes and factions

### Implementation
```typescript
// Add to types/game.ts
export interface EndgameState {
  managementStyle: 'profit' | 'cult' | 'compliance' | 'collapse';
  endingAchieved: boolean;
  endingType: string;
  prestigeLevel: number;
  permanentBonuses: PrestigeBonus[];
}

export interface PrestigeBonus {
  id: string;
  name: string;
  description: string;
  effects: GameModifier[];
  unlockedBy: string;
}

// Add to GameState  
endgameState: EndgameState;
unlockedContent: {
  daemonArchetypes: string[];
  factions: string[];
  events: string[];
};
```

```typescript
// Endgame system in useGameStore.ts
calculateManagementStyle: () => {
  const { decisions, corporateEvents, daemons } = get();
  
  const profitFocus = calculateProfitDecisions(decisions);
  const cultBehavior = calculateCultMetrics(daemons);
  const complianceRate = calculateComplianceRate(corporateEvents);
  const burnoutLevel = calculateBurnoutLevel(daemons);
  
  return determineDominantStyle(profitFocus, cultBehavior, complianceRate, burnoutLevel);
},

triggerEnding: (style: ManagementStyle) => {
  const ending = ENDING_SCENARIOS[style];
  const prestigeBonuses = calculatePrestigeBonuses(get().endgameState);
  
  set({
    endgameState: {
      ...get().endgameState,
      managementStyle: style,
      endingAchieved: true,
      endingType: ending.id,
      prestigeLevel: get().endgameState.prestigeLevel + 1,
      permanentBonuses: [...get().endgameState.permanentBonuses, ...prestigeBonuses]
    }
  });
  
  unlockNewContent(ending);
  showEndingModal(ending);
},

performCorporateRestructuring: () => {
  const { endgameState } = get();
  const newGameState = {
    ...initialState,
    endgameState: {
      ...endgameState,
      endingAchieved: false,
      endingType: ''
    },
    gameModifiers: {
      ...initialState.gameModifiers,
      ...applyPrestigeBonuses(endgameState.permanentBonuses)
    }
  };
  
  set(newGameState);
  get().startNewGame();
}
```

---

## Infernal Org Chart – Corporate Tier Progression

### Tier 1: Associate (Entry Level) 👔

**Unlocked by default**

#### Features:
- Recruit 3 starter daemons
- Access to basic missions (1–2 planets)
- Apartment HQ (Living Quarters + Command Center only)
- Basic equipment crafting & degradation

**Flavor**: *You're just another cog in the infernal machine.*

#### Implementation:
```typescript
export const ASSOCIATE_TIER: CorporateTier = {
  id: 'associate',
  name: 'Associate',
  level: 1,
  requirements: {}, // Default tier
  unlocks: {
    mechanics: ['basic_missions', 'equipment_crafting'],
    apartmentRooms: ['living_quarters', 'command_center'],
    resources: ['credits']
  }
};
```

---

### Tier 2: Manager 📊

**Promotion Requirement**: Conquer 1 planet + survive 20 days

#### New Mechanics:
- **HR Reviews**: Assign daemons to tedious paperwork tasks
- **Team Disputes**: Daemons can feud, lowering morale
- **Apartment upgrade**: Training Hall unlocks

**Flavor**: *You now manage other daemons' misery, not just your own.*

#### Implementation:
```typescript
export const MANAGER_TIER: CorporateTier = {
  id: 'manager',
  name: 'Manager',
  level: 2,
  requirements: {
    planetsControlled: 1,
    daysLived: 20
  },
  unlocks: {
    mechanics: ['hr_reviews', 'team_disputes'],
    apartmentRooms: ['training_hall'],
    eventTypes: ['management_events']
  }
};
```

---

### Tier 3: Director 🏢

**Promotion Requirement**: Own 2 planets + complete 3 HR reviews

#### New Mechanics:
- **Planetary Status Reports**: Each planet requires quarterly reports (drains resources)
- **Command Center Expansion**: Can manage larger mission teams
- **Surreal Events Begin**: First absurd corporate events appear

**Flavor**: *You're part manager, part politician, drowning in memos from other departments.*

#### Implementation:
```typescript
export const DIRECTOR_TIER: CorporateTier = {
  id: 'director',
  name: 'Director',
  level: 3,
  requirements: {
    planetsControlled: 2,
    completedHRReviews: 3
  },
  unlocks: {
    mechanics: ['planetary_reports', 'large_teams', 'surreal_events'],
    apartmentRooms: ['expanded_command_center'],
    eventTypes: ['absurd_bureaucracy']
  }
};
```

---

### Tier 4: Vice President 🌟

**Promotion Requirement**: Control 3+ planets + maintain 1 legacy bloodline for 2 generations

#### New Mechanics:
- **New Resources**: Soul Essence + Bureaucratic Leverage added
- **Corporate Rivalries**: Compete against rival infernal companies
- **Apartment upgrade**: War Room unlocks (mission efficiency boosts)
- **Legacy logbook**: Expands into Hall of Infamy

**Flavor**: *Your name carries weight — and grudges — across infernal space.*

#### Implementation:
```typescript
export const VP_TIER: CorporateTier = {
  id: 'vice_president',
  name: 'Vice President',
  level: 4,
  requirements: {
    planetsControlled: 3,
    legacyGenerations: 2
  },
  unlocks: {
    resources: ['soul_essence', 'bureaucratic_leverage'],
    mechanics: ['corporate_rivalries', 'hall_of_infamy'],
    apartmentRooms: ['war_room'],
    eventTypes: ['rival_corporations']
  }
};
```

---

### Tier 5: Board Member 👑

**Promotion Requirement**: Defeat at least 1 rival corporation + complete 5 compliance audits

#### New Mechanics:
- **Board-Level Compliance**: Extreme events (entire planets restructured as departments)
- **Company-wide Policies**: Choose global buffs/debuffs
- **Absurd Compliance Pressure**: Random memos that derail planning
- **Branching endgame paths**: Based on management style

**Flavor**: *You've ascended to the highest circle of hell — the C-Suite. Every decision echoes through infernal eternity.*

#### Implementation:
```typescript
export const BOARD_MEMBER_TIER: CorporateTier = {
  id: 'board_member',
  name: 'Board Member',
  level: 5,
  requirements: {
    defeatedRivals: 1,
    complianceAudits: 5
  },
  unlocks: {
    mechanics: ['board_compliance', 'company_policies', 'endgame_paths'],
    apartmentRooms: ['executive_suite'],
    eventTypes: ['apocalyptic_bureaucracy'],
    resources: ['executive_power']
  }
};

export const CORPORATE_TIERS = [
  ASSOCIATE_TIER,
  MANAGER_TIER,
  DIRECTOR_TIER,
  VP_TIER,
  BOARD_MEMBER_TIER
];
```

---

## Technical Architecture Notes

### State Management Integration
All new features integrate with the existing Zustand store pattern:

```typescript
// Enhanced GameState interface
interface GameState extends ExistingGameState {
  // Corporate Progression
  corporateTier: CorporateTier;
  promotionProgress: Record<string, number>;
  
  // Compliance System
  complianceTasks: ComplianceTask[];
  complianceDeadlines: Record<string, number>;
  
  // Legacy System
  legacyBook: Record<string, DaemonLegacy>;
  hallOfInfamy: LegacyStory[];
  
  // Endgame
  endgameState: EndgameState;
  unlockedContent: UnlockedContent;
}
```

### Component Architecture
New components follow existing patterns:

```
src/components/
├── game/
│   ├── CorporateLadder.tsx
│   ├── ComplianceCenter.tsx
│   ├── HallOfInfamy.tsx
│   └── RivalCorporations.tsx
├── ui/
│   ├── PromotionModal.tsx
│   ├── ComplianceTaskCard.tsx
│   ├── LegacyStoryModal.tsx
│   └── EndgameModal.tsx
└── layout/
    └── TierIndicator.tsx
```

### Data Constants
Extended game data follows existing structure:

```typescript
// constants/gameData.ts additions
export const CORPORATE_TIERS = [...];
export const COMPLIANCE_TEMPLATES = [...];
export const SURREAL_EVENTS = {...};
export const ENDING_SCENARIOS = {...};
export const PRESTIGE_BONUSES = [...];
```